@page "{id:int}"
@using cards.Data.Game
@model IndexModel

@{
    ViewData["Title"] = "Lobby " + Model.Id;
}

<div class="row gx-3">
    <div class="col">
        <div id="gameDropdown" class="dropdown">
            <button class="btn btn-secondary dropdown-toggle" type="button"
                    id="selectGameDropdownButton" data-bs-toggle="dropdown"
                    aria-expanded="false">
                @if (Model.Lobby.HasSelected)
                {
                    <span>
                        @(Model.Lobby.Game?.Title)
                    </span>
                }
                else
                {
                    <span>Select Game</span>
                }
            </button>
            <ul class="dropdown-menu" aria-labelledby="selectGameDropdownButton" id="selectableGamesList">
                @foreach (var game in Enum.GetValues<GameEnum>())
                {
                    <li>
                        <button class="dropdown-item" id="select-@game" onclick="setGame(@((int) game))">Model.Lobby.Game?.Title)</button>
                    </li>
                }
            </ul>
        </div>
        <br>
        <button class="btn btn-primary" id="startGameButton" onclick="startGame()">Start Game</button>
        <br>
        <div class="input-group" id="shareForm">
            <input type="text" class="form-control" readonly value="@Model.JoinLink">
            <button class="btn-primary btn" onclick="copy()" id="copyButton">Copy</button>
        </div>
    </div>

    <div class="col-8">
        <p id="gameDescription">
            @if (Model.Lobby.HasSelected)
            {
                @Html.Raw(Model.Lobby.Game?.Description)
            }
        </p>
    </div>

</div>
@* Connected users offset canvas *@
<div class="offcanvas offcanvas-start" tabindex="-1" id="connectedUsersCanvas" aria-labelledby="connectedUsersCanvasLabel">
    <div class="offcanvas-header">
        <h5 class="offcanvas-title" id="connectedUsersCanvasLabel">Connected</h5>
        <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body">
        <div>
            <ul id="userList"></ul>
        </div>
        <div>
            <h5 id="gameTitleSidebar">
                @if (Model.Lobby.HasSelected)
                {
                    @Html.Raw(Model.Lobby.Game?.Title)
                }
            </h5>
            <p id="gameDescriptionSidebar">
                @if (Model.Lobby.HasSelected)
                {
                    @Html.Raw(Model.Lobby.Game?.Description)
                }
            </p>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-8" id="game">

    </div>
    <div class="col" id="leaderboardCol" hidden>
        <h1 class="display-4">Leaderboard</h1>
        <ol id="leaderboard">

        </ol>
    </div>
</div>


<script src="~/js/signalr/dist/browser/signalr.min.js"></script>

<script >
"use strict"
const connection = new signalR.HubConnectionBuilder().withUrl("/gameHub").build();

const game = document.getElementById("game");
const userList = document.getElementById("userList");

// Connect to the hub
connection.start().then(function () {
    connection.invoke("Connect", "@Model.Username", @Model.Id).catch(function(err) {
        // TODO handle error
        return console.error(err.toString());
    });
}).catch(function (err) {
    // TODO handle error
    return console.error(err.toString());
});

// Show connected users with tab

window.onload = function () {
    const connectUserCanvas = new bootstrap.Offcanvas(document.getElementById("connectedUsersCanvas"));
    window.onkeydown = function(event) {
        if (event.key === "Tab") {
            event.preventDefault();
            connectUserCanvas.toggle();
        }
    }
}

// Listen to updates
connection.on("ConnectedUsersUpdate", function (users) {
    // Clear all children
    while (userList.firstChild){
        userList.removeChild(userList.firstChild);
    }
    
    for (const user of users) {
        const li = document.createElement("li");
        li.textContent = user;
        
        userList.appendChild(li);
    }
});

const selectDropdownButton = document.getElementById("selectGameDropdownButton");
const descriptionParagraph = document.getElementById("gameDescription");
const descriptionParagraphSidebar = document.getElementById("gameDescriptionSidebar");
const gameTitleSidebar = document.getElementById("gameTitleSidebar");

connection.on("SelectedGameUpdate", function(game, description) {
    selectDropdownButton.innerHTML = `<span>${game} </span>`;
    descriptionParagraph.innerHTML = description;
    descriptionParagraph.hidden = false;
    descriptionParagraphSidebar.innerHTML = description;
    gameTitleSidebar.innerHTML = game;
});

const dropdown = document.getElementById("gameDropdown");
const startButton = document.getElementById("startGameButton");
const shareForm = document.getElementById("shareForm");
let selectedCard = -1;
let cardButtons = [];
connection.on("GameUpdate", function (gameData) {
    
    descriptionParagraph.hidden = true;
    
    // Delete all children
    while (game.firstChild){
        game.removeChild(game.firstChild);
    }
    
    cardButtons = [];
    selectedCard = -1;
    
    dropdown.hidden = true;
    startButton.hidden = true;
    shareForm.hidden = true;
    
    let currentCard = document.createElement("h1");
    currentCard.innerHTML = gameData["topCard"];
    currentCard.className = "display-4";
    game.appendChild(currentCard);
    
    let playButton = document.createElement("button");
    
    // My cards
    for(let i = 0; i < gameData["cards"].length; i++) {
        let tmp = document.createElement("button");
        tmp.className = "btn btn-light game-card";
        tmp.innerHTML = gameData["cards"][i];
        tmp.disabled = 0 !== gameData["currentPlayer"];
        cardButtons.push(tmp);
        tmp.onclick = function (){
            selectedCard = i;
            playButton.disabled = 0 !== gameData["currentPlayer"];
            
            for (let j = 0; j < cardButtons.length; j++) {
                cardButtons[j].className = "btn btn-light game-card";
                
                if (i === j) {
                    cardButtons[j].className = "btn btn-dark game-card";
                }
            }
        };
        
        game.appendChild(tmp);
    }
    
    game.appendChild(document.createElement("br"));
    
    // Add the amount of the other players
    for (let i = 0; i < gameData["otherAmount"].length; i++) {
      let span = document.createElement("span");
      span.textContent = gameData["otherUsernames"][i] + ": " + gameData["otherAmount"][i];
      if (i !== gameData["currentPlayer"] - 1){
        span.className = "text-muted";
      }
      
      game.appendChild(span);
      game.appendChild(document.createElement("br"));
    }
    
    game.appendChild(document.createElement("hr"));
    
    playButton.innerText = "Play";
    playButton.className = "btn btn-primary game-card";
    playButton.disabled = true;
    playButton.onclick = function (){
        play(gameData["id"]);
    }
    game.appendChild(playButton);
    
    // Add features
    for (let i = 0; i < gameData["features"].length; i++) {
        let button = document.createElement("button");
        button.innerHTML = gameData["features"][i];
        button.className = "btn btn-primary game-card";
        
        button.hidden = !gameData["featureEnabled"][i];
        
        button.onclick = function () {
            feature(gameData["id"], i);
        }
        
        game.appendChild(button);
    }
});

const leaderboard = document.getElementById("leaderboard");
const leaderboardCol = document.getElementById("leaderboardCol");
connection.on("RoundWinner", function(leaderboardData) {
    // Clear all children
    while (leaderboard.firstChild){
        leaderboard.removeChild(leaderboard.firstChild);    
    }
    
    leaderboardCol.hidden = false;
    
    for (const player of leaderboardData["players"]) {
      let user = document.createElement("li");
      user.innerText = `${player["username"]}: ${player["points"]}`;
      
      leaderboard.appendChild(user);
    }
})

// Send updates
// React to game selection
function setGame(game){
    connection.invoke("ReceiveSelectGame", @Model.Id, game).catch(function(err) {
      return console.log(err.toString());
    });
}

function startGame(){
    connection.invoke("ReceiveStartGame", @Model.Id).catch(function(err) {
      return console.log(err.toString());
    });
}

function play(playerId){
    // If no card selected, don't execute
    if (selectedCard < 0) {
        return;
    }
    connection.invoke("ReceivePlay", @Model.Id, playerId, selectedCard).catch(function (err) {
        return console.log(err.toString());
    });
}

function feature(playerId, featureId){
    connection.invoke("ReceiveFeature", @Model.Id, playerId, featureId).catch(function (err) {
        return console.log(err.toString());
    });    
}

// Other functions
const copyButton = document.getElementById("copyButton");
function copy(){
    navigator.clipboard.writeText("@Model.JoinLink");
    copyButton.innerText = "Copied!";
}
</script>