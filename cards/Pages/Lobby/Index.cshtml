@page "{id:int}"
@using cards.Data.Game
@using Humanizer
@model IndexModel

@{
    ViewData["Title"] = "Lobby " + Model.Id;
}

@* Connected users offset canvas *@
<div class="offcanvas offcanvas-start" tabindex="-1" id="connectedUsersCanvas" aria-labelledby="connectedUsersCanvasLabel">
    <div class="offcanvas-header">
        <h5 class="offcanvas-title" id="connectedUsersCanvasLabel">Connected</h5>
        <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body">
        <div>
            <ul id="userList"></ul>
        </div>
    </div>
</div>

<div id="gameDropdown" class="dropdown">
    <button class="btn btn-secondary dropdown-toggle" type="button"
            id="selectGameDropdownButton" data-bs-toggle="dropdown"
            aria-expanded="false">
        @if (Model.Lobby.HasSelected)
        {
            <span>@Model.Lobby.SelectedGame</span>
        }
        else
        {
            <span>Select Game</span>
        }
    </button>
    <ul class="dropdown-menu" aria-labelledby="selectGameDropdownButton" id="selectableGamesList">
        @foreach (var game in Enum.GetValues<GameEnum>())
        {
            <li>
                <button class="dropdown-item" id="select-@game" onclick="setGame(@((int) game))">@game.Humanize()</button>
            </li>
        }
    </ul>
</div>

<button class="btn btn-primary" id="startGameButton" onclick="startGame()">Start Game</button>

<div id="game">
    
</div>

<script src="~/js/signalr/dist/browser/signalr.min.js"></script>

<script >
"use strict"
const connection = new signalR.HubConnectionBuilder().withUrl("/gameHub").build();
const games = ["@Html.Raw(string.Join("\", \"", Enum.GetNames<GameEnum>()))"];

const game = document.getElementById("game");
const userList = document.getElementById("userList");

// Connect to the hub
connection.start().then(function () {
    connection.invoke("Connect", "@Model.Username", @Model.Id).catch(function(err) {
        // TODO handle error
        return console.error(err.toString());
    });
}).catch(function (err) {
    // TODO handle error
    return console.error(err.toString());
});

// Show connected users with tab

window.onload = function () {
    const connectUserCanvas = new bootstrap.Offcanvas(document.getElementById("connectedUsersCanvas"));
    window.onkeydown = function(event) {
        if (event.key === "Tab") {
            event.preventDefault();
            connectUserCanvas.toggle();
        }
    }
}

// Listen to updates
connection.on("ConnectedUsersUpdate", function (users) {
    // Clear all children
    while (userList.firstChild){
        userList.removeChild(userList.firstChild);
    }
    
    for (const user of users) {
        const li = document.createElement("li");
        li.textContent = user;
        
        userList.appendChild(li);
    }
});

const selectDropdownButton = document.getElementById("selectGameDropdownButton");
connection.on("SelectedGameUpdate", function(game) {
    selectDropdownButton.innerText = games[game];
});

const dropdown = document.getElementById("gameDropdown");
const startButton = document.getElementById("startGameButton");
let selectedCard = -1;
let cardButtons = [];
connection.on("GameUpdate", function (gameData) {
    // Delete all children
    while (game.firstChild){
        game.removeChild(game.firstChild);
    }
    
    cardButtons = [];
    selectedCard = -1;
    
    dropdown.hidden = true;
    startButton.hidden = true;
    
    let currentCard = document.createElement("h1");
    currentCard.innerHTML = gameData["topCard"];
    game.appendChild(currentCard);
    
    let playButton = document.createElement("button");
    
    // My cards
    for(let i = 0; i < gameData["cards"].length; i++) {
        let tmp = document.createElement("button");
        tmp.className = "btn btn-light";
        tmp.innerHTML = gameData["cards"][i];
        tmp.disabled = 0 !== gameData["currentPlayer"];
        cardButtons.push(tmp);
        tmp.onclick = function (){
            selectedCard = i;
            playButton.disabled = 0 !== gameData["currentPlayer"];
            
            for (let j = 0; j < cardButtons.length; j++) {
                cardButtons[j].className = "btn btn-light";
                
                if (i === j) {
                    cardButtons[j].className = "btn btn-dark";
                }
            }
        };
        
        game.appendChild(tmp);
    }
    
    game.appendChild(document.createElement("br"));
    
    // Add the amount of the other players
    for (let i = 0; i < gameData["otherAmount"].length; i++) {
      let span = document.createElement("span");
      span.textContent = gameData["otherUsernames"][i] + ": " + gameData["otherAmount"][i];
      if (i !== gameData["currentPlayer"] - 1){
        span.className = "text-muted";
      }
      
      game.appendChild(span);
      game.appendChild(document.createElement("br"));
    }
    
    playButton.innerText = "Play";
    playButton.className = "btn btn-primary";
    playButton.disabled = true;
    playButton.onclick = function (){
        play(gameData["id"]);
    }
    game.appendChild(playButton);
    
    // Add features
    for (let i = 0; i < gameData["features"].length; i++) {
        let button = document.createElement("button");
        button.innerHTML = gameData["features"][i];
        button.className = "btn btn-primary";
        
        button.hidden = !gameData["featureEnabled"][i];
        
        button.onclick = function () {
            feature(gameData["id"], i);
        }
        
        game.appendChild(button);
    }
});

// Send updates
// React to game selection
function setGame(game){
    connection.invoke("ReceiveSelectGame", @Model.Id, game).catch(function(err) {
      return console.log(err.toString());
    });
}

function startGame(){
    connection.invoke("ReceiveStartGame", @Model.Id).catch(function(err) {
      return console.log(err.toString());
    });
}

function play(playerId){
    // If no card selected, don't execute
    if (selectedCard < 0) {
        return;
    }
    connection.invoke("ReceivePlay", @Model.Id, playerId, selectedCard).catch(function (err) {
        return console.log(err.toString());
    });
}

function feature(playerId, featureId){
    connection.invoke("ReceiveFeature", @Model.Id, playerId, featureId).catch(function (err) {
        return console.log(err.toString());
    });    
}

</script>