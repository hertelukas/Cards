@page "{id:int}"
@using cards.Data.Game
@using Humanizer
@model IndexModel

@{
    ViewData["Title"] = "Lobby " + Model.Id;
}

@* Connected users offset canvas *@
<a class="btn btn-primary" data-bs-toggle="offcanvas" href="#connectedUsersCanvas" role="button" aria-controls="connectedUsersCanvas">
    Connected Users
</a>

<div class="offcanvas offcanvas-start" tabindex="-1" id="connectedUsersCanvas" aria-labelledby="connectedUsersCanvasLabel">
    <div class="offcanvas-header">
        <h5 class="offcanvas-title" id="connectedUsersCanvasLabel">Connected</h5>
        <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body">
        <div>
            <ul id="userList"></ul>
        </div>
    </div>
</div>

<div id="gameDropdown" class="dropdown">
    <button class="btn btn-secondary dropdown-toggle" type="button"
            id="selectGameDropdownButton" data-bs-toggle="dropdown"
            aria-expanded="false">
        @if (Model.Lobby.HasSelected)
        {
            <span>@Model.Lobby.SelectedGame</span>
        }
        else
        {
            <span>Select Game</span>
        }
    </button>
    <ul class="dropdown-menu" aria-labelledby="selectGameDropdownButton" id="selectableGamesList">
        @foreach (var game in Enum.GetValues<GameEnum>())
        {
            <li>
                <button class="dropdown-item" id="select-@game" onclick="setGame(@((int) game))">@game.Humanize()</button>
            </li>
        }
    </ul>
</div>

<button class="btn btn-primary" id="startGameButton" onclick="startGame()">Start Game</button>

<div id="game">
    
</div>

<script src="~/js/signalr/dist/browser/signalr.min.js"></script>

<script >
"use strict"
const connection = new signalR.HubConnectionBuilder().withUrl("/gameHub").build();
const games = ["@Html.Raw(string.Join("\", \"", Enum.GetNames<GameEnum>()))"];

const game = document.getElementById("game");
const userList = document.getElementById("userList");

// Connect to the hub
connection.start().then(function () {
    connection.invoke("Connect", "@Model.Username", @Model.Id).catch(function(err) {
        // TODO handle error
        return console.error(err.toString());
    });
}).catch(function (err) {
    // TODO handle error
    return console.error(err.toString());
});

// Listen to updates
connection.on("ConnectedUsersUpdate", function (users) {
    // Clear all children
    while (userList.firstChild){
        userList.removeChild(userList.firstChild);
    }
    
    for (const user of users) {
        const li = document.createElement("li");
        li.textContent = user;
        
        userList.appendChild(li);
    }
});

const selectDropdownButton = document.getElementById("selectGameDropdownButton");
connection.on("SelectedGameUpdate", function(game) {
    selectDropdownButton.innerText = games[game];
});

const dropdown = document.getElementById("gameDropdown");
const startButton = document.getElementById("startGameButton");
connection.on("GameUpdate", function (gameData) {
    // Delete all children
    while (game.firstChild){
        game.removeChild(game.firstChild);
    }
    
    dropdown.hidden = true;
    startButton.hidden = true;
    
    // My cards
    for (const card of gameData["cards"]) {
        let span = document.createElement("span");
        span.textContent = card;
        
        game.appendChild(span);
    }
    
    game.appendChild(document.createElement("br"));
    
    // Add the amount of the other players
    for (const amount of gameData["otherAmount"]) {
      let span = document.createElement("span");
      span.textContent = amount;
      
      game.appendChild(span);
      game.appendChild(document.createElement("br"));
    }
});

// Send updates
// React to game selection
function setGame(game){
    connection.invoke("ReceiveSelectGame", @Model.Id, game).catch(function(err) {
      return console.log(err.toString());
    });
}

function startGame(){
    connection.invoke("ReceiveStartGame", @Model.Id).catch(function(err) {
      return console.log(err.toString());
    });
}
</script>